{"remainingRequest":"/home/nicolas/Desktop/socket_io/client/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/nicolas/Desktop/socket_io/client/src/components/ComponentCanvas.vue?vue&type=template&id=7425f435","dependencies":[{"path":"/home/nicolas/Desktop/socket_io/client/src/components/ComponentCanvas.vue","mtime":1616635831418},{"path":"/home/nicolas/Desktop/socket_io/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nicolas/Desktop/socket_io/client/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/nicolas/Desktop/socket_io/client/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/nicolas/Desktop/socket_io/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nicolas/Desktop/socket_io/client/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8Y2FudmFzIHdpZHRoPSIzMjAiIGhlaWdodD0iMzIwIiBzdHlsZT0ibWFyZ2luOiAwIGF1dG87IHdpZHRoOiAxMDAlIj4KICAgICAgICBDYW52YXMgbm90IHN1cHBvcnRlZAogICAgPC9jYW52YXM+Cg=="},{"version":3,"sources":["/home/nicolas/Desktop/socket_io/client/src/components/ComponentCanvas.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/nicolas/Desktop/socket_io/client/src/components/ComponentCanvas.vue","sourceRoot":"","sourcesContent":["<template>\n    <canvas width=\"320\" height=\"320\" style=\"margin: 0 auto; width: 100%\">\n        Canvas not supported\n    </canvas>\n</template>\n\n<script>\n    import io from \"socket.io-client\"\n    import {Entity, EntityListDict} from \"../scripts/Entity.js\"\n\n    export default {\n        name: 'ComponentCanvas',\n        data (){\n            return {\n                socket: {},\n                player: {},\n                enemy:  {},\n                turn: 0,\n            }\n        },\n        created() {\n            this.socket = io(\"http://localhost:3000\", {transports:['websocket']});\n        },\n        mounted() {\n\n\n            this.socket.on('connect', () => {\n                const playerId = this.socket.id\n                console.log(\"> Connected to Server: \", playerId);\n\n\n                var canvas = document.querySelector('canvas');\n                var context = canvas.getContext('2d');\n\n                // Ta nos arquivos scripts/Entity.js\n                var entityList = new EntityListDict();\n\n                entityList.print()\n\n                var sprite_char = new Image();\n                sprite_char.src = require('../assets/idle.png');\n\n\n                var game_world;\n\n\n                var that = this\n                window.addEventListener('keydown', function(e){\n                    var keyPressed = e.key;\n\n                    const command = {\n                        type: 'move-player',\n                        playerId: playerId,\n                        keyPressed\n                    }\n\n                    that.socket.emit('move-player', command);\n\n                }, false);\n\n    \n\n                function loop(){\n                    window.requestAnimationFrame(loop, canvas);\n                    render();\n                }\n\n\n                // Evento chamado quando o jogador conecta com o servidor.\n                // Recebe todas informações dos jogadores, etc.\n                // Inicia o background do canvas com o mapa\n                this.socket.on('setup', (command) => {\n                    var background = new Image()\n                    background.src = require(\"../assets/map.jpeg\");\n\n                    game_world  = new Entity(null, 0, 0, command.scenario.image.width, command.scenario.image.height, background, {x:0, y:0});\n\n                    Object.keys(command.players).forEach(function(key) {\n                        entityList.add(new Entity(key, command.players[key].x, command.players[key].y, 16, 16, sprite_char, command.players[key].cam))\n                    });\n\n                })\n\n                // Evento chamado quando algum jogador se move no mapa.\n                // É usado pra atualizar a posição do player no client\n                this.socket.on('move-player', (command) => {\n                    updateSpecificPlayer(command.playerId, command.position, command.cam)\n                });\n\n\n                // Evento chamado quando o server adiciona um novo jogador.\n                this.socket.on('add-player', (command) => {\n                    entityList.add(new Entity(command.playerId, command.position.x, command.position.y, 16, 16, sprite_char, command.cam))\n                });\n\n                // Evento chamado quando o server remove um jogador.\n                this.socket.on('remove-player', (command) => {\n                    console.log(\"> Removing Player \", command.playerId);\n                    entityList.remove(command.playerId)\n                });\n\n\n                // Funcao utilizada pra atualizar a posicao e a camera de um player baseado no seu ID.\n                function updateSpecificPlayer(playerId, position, cam){\n                    entityList.entities.players[playerId].x = position.x;\n                    entityList.entities.players[playerId].y = position.y;\n\n                    entityList.entities.players[playerId].cam.x = cam.x;\n                    entityList.entities.players[playerId].cam.y = cam.y;\n                }\n\n\n\n                // Funcao que é chamada dentro do loop do canvas que desenha tudo que tem no entityList, além do background\n                function render()\n                {\n                    // Não sei pra que serve mas tem que usar\n                    context.save();\n\n                    // Atualiza a posicao da camera do player\n                    var playerCam = entityList.entities.players[playerId].cam;\n                    context.translate(-playerCam.x, -playerCam.y);\n\n                    // Desenha o background antes pra ficar atras dos players\n                    context.drawImage(game_world.sprite, 0, 0);   \n\n                    // Desenha tudo que tem no entityList\n                    for (const [key, value] of Object.entries(entityList.entities.players)) {\n                        context.drawImage(value.sprite, 0, 0, value.width, value.height, value.x, value.y, value.width, value.height);   \n                    }\n\n                    // Não sei pra que serve mas tem que usar\n                    context.restore();\n                }\n\n                loop()\n            });\n\n\n\n\n        }\n\n    }\n</script>\n\n<style scoped></style>\n"]}]}